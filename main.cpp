/*
 * Created by Qt Creator 4.11.0 @ 07 Mar 2021 16:24:09
 *
 * Project: GB_CppOOP
 * File: main.cpp
 *
 * Author: Sergey Lola
 */

#include <iostream>

#include "task_8_1.h"
#include "task_8_2.h"
#include "task_8_3.h"

// ---------------------------------------------------------------------------
// вспомогательный макрос для удаления предупреждения об неиспользуемой
// переменной
#undef UNUSED
#define UNUSED(X) (void)(X);

using namespace std;

// --------------------------------------------------------------------------------------
int main(int argc, const char ** argv) {
  UNUSED(argc)
  UNUSED(argv)

  // --------------------------------------------------------------------------------------
  // ЗАДАНИЕ 1: Написать шаблонную функцию div, которая должна вычислять результат деления
  // двух параметров и запускать исключение DivisionByZero, если второй параметр равен 0.
  // В функции main выводить результат вызова функции div в консоль, а также ловить
  // исключения.
  {
    cout << "--- TASK 1 ---" << endl;
    try {
      cout << "Correct variant: " << my_funcs::div(1., 2.) << endl;
      my_funcs::div(1., 0.);
    }
    catch (const std::string &ex) {
      cout << "Catch exception: " << ex << endl;
    }
  }
  // --------------------------------------------------------------------------------------
  // ЗАДАНИЕ 2: Написать класс Ex, хранящий вещественное число x и имеющий конструктор по
  // вещественному числу, инициализирующий x значением параметра. Написать класс Bar,
  // хранящий вещественное число y (конструктор по умолчанию инициализирует его нулем) и
  // имеющий метод set с единственным вещественным параметром a. Если y + a > 100,
  // возбуждается исключение типа Ex с данными a*y, иначе в y заносится значение a. В
  // функции main завести переменную класса Bar и в цикле в блоке try вводить с клавиатуры
  // целое n. Использовать его в качестве параметра метода set до тех пор, пока не будет
  // введено 0. В обработчике исключения выводить сообщение об ошибке, содержащее данные
  // объекта исключения.
  {
    cout << endl << "--- TASK 1 ---" << endl;
    Bar bar;
    int n;
    try {
      do {
        cout << "Enter a number: ";
        cin.clear();
        cin >> n;
        bar.set(n);
      } while (0 != n);
    }
    catch (const Ex &ex) {
      cout << "Catch exception: " << ex.message() << endl;
    }
  }
  // --------------------------------------------------------------------------------------
  // ЗАДАНИЕ 3: Написать класс «робот», моделирующий перемещения робота по сетке 10x10, у
  // которого есть метод, означающий задание переместиться на соседнюю позицию. Эти методы
  // должны запускать классы-исключения OffTheField, если робот должен уйти с сетки, и
  // IllegalCommand, если подана неверная команда (направление не находится в нужном
  // диапазоне). Объект исключения должен содержать всю необходимую информацию — текущую
  // позицию и направление движения. Написать функцию main, пользующуюся этим классом и
  // перехватывающую все исключения от его методов, а также выводящую подробную информацию
  // о всех возникающих ошибках.
  {
    Robot robot;
    try {
      robot.setGrid({10, 10});
      robot.setDirection(Direction::North);
      robot.move();
      robot.move();
      robot.setDirection(Direction::East);
      robot.move();
      robot.move();
    }
    catch (const RobotException &ex) {
      cout << "Exception: " << ex.what() << endl;
    }
  }
  return 0;
}
