/*
 * Created by Qt Creator 4.11.0 @ 22 Mar 2021 18:09:56
 *
 * Project: GB_CppOOP
 * File: card.h
 *
 * Author: Sergey Lola
 */
#pragma once

#include "common.h"

// --------------------------------------------------------------------------------------
// Создать класс Card, описывающий карту в игре БлэкДжек. У этого класса должно быть три
// поля: масть, значение карты и положение карты (вверх лицом или рубашкой). Сделать поля
// масть и значение карты типом перечисления (enum). Положение карты - тип bool. Также в
// этом классе должно быть два метода: метод Flip(), который переворачивает карту, т.е.
// если она была рубашкой вверх, то он ее поворачивает лицом вверх, и наоборот; метод
// GetValue(), который возвращает значение карты, пока можно считать, что туз = 1.

// перечисление для мастей карты
enum class CardSuit {
  Undefined,  // значение по умолчанию
  Clubs,      // трефы
  Spades,     // пики
  Hearts,     // червы
  Diamonds,   // бубны
};

// перечисление для значения карты
// ПРИМЕЧАНИЕ: возможно не самое удачное решение, поскольку при преобразовании
// int -> enum однозначно теряем ключ перечисления, но для "ленивого" варианта
// самое то :) Подозреваю, что конвертация всегда будет односторонняя,
// т.е. enum -> int для получения числового значения карты, что вполне устраивает.
// ПРИМЕЧАНИЕ 2: на некоторых компиляторах в зависимости от настроек возможны
// warning'и. Мой 9-й g++ промолчал, его видимо все устроило.
enum class CardValue {
  Undefined = 0,  // значение по умолчанию
  Num_1 = 1,      // карта с единицей (для большой колоды)
  Num_2 = 2,      // карта с двойкой (для большой колоды)
  Num_3 = 3,      // карта с тройкой (для большой колоды)
  Num_4 = 4,      // карта с четверкой (для большой колоды)
  Num_5 = 5,      // карта с пятеркой (для большой колоды)
  Num_6 = 6,      // карта с шестеркой (для стандартной колоды)
  Num_7 = 7,      // карта с семеркой (для стандартной колоды)
  Num_8 = 8,      // карта с восьмеркой (для стандартной колоды)
  Num_9 = 9,      // карта с девяткой (для стандартной колоды)
  Num_10 = 10,    // карта с десяткой (для стандартной колоды)
  Jack = 10,      // карта с вальтом
  Queen = 10,     // карта с дамой
  King = 10,      // карта с королем
  Ace = 1,        // карта с тузом
};

class Card {
public:
  Card(CardSuit suit, CardValue value, bool is_face = false) :
    m_suit(suit), m_value(value), m_is_face(is_face) {}
  ~Card() = default;

  // возращаем кол-во очков, которые можно получить за карту
  inline int getValue() const { return static_cast<int>(m_value); }

  // проверка, повернута ли карта "лицом"
  inline bool isFace() const { return m_is_face; }

  // переворачиваем карту
  inline void flip() { m_is_face ^= true; }

private:
  CardSuit m_suit {CardSuit::Undefined};
  CardValue m_value {CardValue::Undefined};
  bool m_is_face {false};
};
